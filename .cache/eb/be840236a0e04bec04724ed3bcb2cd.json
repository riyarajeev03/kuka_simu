{"id":"index3.html","dependencies":[{"name":"_css_loader","parent":"C:\\Users\\riyam\\Downloads\\Multipage-Website-project-2-master\\ribo\\index3.html","resolved":"C:\\Users\\riyam\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\src\\builtins\\css-loader.js"}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>KUKA LBR Robot Control</title>\r\n  <style>body { margin: 0; background-color: #b1fcf6; }\r\n    canvas { width: 100%; height: 100%; }\r\n    #controls { position: absolute; top: 10px; left: 10px; background: rgba(255, 255, 255, 0.7); padding: 10px; }\r\n    input[type=\"range\"] { width: 200px; }\r\n    #coordinates { margin-top: 10px; }\r\n    .control-group { margin-bottom: 10px; }</style>\r\n</head>\r\n<body>\r\n  <div id=\"container3D\"></div>\r\n  <div id=\"controls\">\r\n    <!-- Removed the shoulder control -->\r\n    <div class=\"control-group\">\r\n      <label for=\"link_1\">Upper Arm:</label>\r\n      <input type=\"range\" id=\"link_1\" min=\"-90\" max=\"90\" value=\"0\">\r\n      <input type=\"text\" id=\"link_1_value\" value=\"0\" size=\"3\">\r\n    </div>\r\n    <div class=\"control-group\">\r\n      <label for=\"link_2\">Elbow:</label>\r\n      <input type=\"range\" id=\"link_2\" min=\"-90\" max=\"90\" value=\"0\">\r\n      <input type=\"text\" id=\"link_2_value\" value=\"0\" size=\"3\">\r\n    </div>\r\n    <div class=\"control-group\">\r\n      <label for=\"link_3\">Forearm:</label>\r\n      <input type=\"range\" id=\"link_3\" min=\"-90\" max=\"90\" value=\"0\">\r\n      <input type=\"text\" id=\"link_3_value\" value=\"0\" size=\"3\">\r\n    </div>\r\n    <div class=\"control-group\">\r\n      <label for=\"link_4\">Wrist 1:</label>\r\n      <input type=\"range\" id=\"link_4\" min=\"-90\" max=\"90\" value=\"0\">\r\n      <input type=\"text\" id=\"link_4_value\" value=\"0\" size=\"3\">\r\n    </div>\r\n    <div class=\"control-group\">\r\n      <label for=\"link_5\">Wrist 2:</label>\r\n      <input type=\"range\" id=\"link_5\" min=\"-90\" max=\"90\" value=\"0\">\r\n      <input type=\"text\" id=\"link_5_value\" value=\"0\" size=\"3\">\r\n    </div>\r\n    <div class=\"control-group\">\r\n      <label for=\"link_6\">Wrist 3:</label>\r\n      <input type=\"range\" id=\"link_6\" min=\"-90\" max=\"90\" value=\"0\">\r\n      <input type=\"text\" id=\"link_6_value\" value=\"0\" size=\"3\">\r\n    </div>\r\n    <div class=\"control-group\">\r\n      <label for=\"link_7_basic\">Wrist 4:</label>\r\n      <input type=\"range\" id=\"link_7_basic\" min=\"-90\" max=\"90\" value=\"0\">\r\n      <input type=\"text\" id=\"link_7_basic_value\" value=\"0\" size=\"3\">\r\n    </div>\r\n    <div id=\"coordinates\">\r\n      <p id=\"position\">Position: (X: 0, Y: 0, Z: 0)</p>\r\n    </div>\r\n  </div>\r\n\r\n  <script type=\"module\">\r\n    // Import the THREE.js library\r\n    import * as THREE from \"https://cdn.skypack.dev/three@0.129.0/build/three.module.js\";\r\n    // To allow for the camera to move around the scene\r\n    import { OrbitControls } from \"https://cdn.skypack.dev/three@0.129.0/examples/jsm/controls/OrbitControls.js\";\r\n    // To allow for importing the .gltf file\r\n    import { GLTFLoader } from \"https://cdn.skypack.dev/three@0.129.0/examples/jsm/loaders/GLTFLoader.js\";\r\n\r\n    // Create a Three.JS Scene\r\n    const scene = new THREE.Scene();\r\n\r\n    // Create a new camera with positions and angles\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    camera.position.set(10, 10, 10);\r\n\r\n    // Instantiate a loader for the .gltf file\r\n    const loader = new GLTFLoader();\r\n\r\n    // Object to store references to each link\r\n    const links = {};\r\n\r\n    // Load the robot file\r\n    loader.load(\r\n      \"../models/robot3.gltf\",\r\n      function (gltf) {\r\n        // If the file is loaded, add it to the scene\r\n        const object = gltf.scene;\r\n        scene.add(object);\r\n\r\n        // Find each link in the model\r\n        object.traverse(function(child) {\r\n          if (child.isMesh && child.name.startsWith(\"link_\")) {\r\n            links[child.name] = child;\r\n          }\r\n        });\r\n\r\n        // Position and scale the model\r\n        object.scale.set(13, 13, 13);  // Make it bigger\r\n        object.position.set(0, -10, 0);  // Set at the base\r\n      },\r\n      function (xhr) {\r\n        // While it is loading, log the progress\r\n        console.log((xhr.loaded / xhr.total * 100) + '% loaded');\r\n      },\r\n      function (error) {\r\n        // If there is an error, log it\r\n        console.error(error);\r\n      }\r\n    );\r\n\r\n    // Instantiate a new renderer and set its size\r\n    const renderer = new THREE.WebGLRenderer({ alpha: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    // Add the renderer to the DOM\r\n    document.getElementById(\"container3D\").appendChild(renderer.domElement);\r\n\r\n    // Add lights to the scene\r\n    const topLight = new THREE.DirectionalLight(0xffffff, 1);\r\n    topLight.position.set(500, 500, 500);\r\n    topLight.castShadow = true;\r\n    scene.add(topLight);\r\n\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 1);\r\n    scene.add(ambientLight);\r\n\r\n    // Additional lights\r\n    const light1 = new THREE.DirectionalLight(0xffffff, 0.5);\r\n    light1.position.set(-500, 500, 500);\r\n    scene.add(light1);\r\n\r\n    const light2 = new THREE.DirectionalLight(0xffffff, 0.5);\r\n    light2.position.set(500, -500, 500);\r\n    scene.add(light2);\r\n\r\n    const light3 = new THREE.DirectionalLight(0xffffff, 0.5);\r\n    light3.position.set(500, 500, -500);\r\n    scene.add(light3);\r\n\r\n    const light4 = new THREE.DirectionalLight(0xffffff, 0.5);\r\n    light4.position.set(-500, -500, -500);\r\n    scene.add(light4);\r\n\r\n    // Add point lights for better overall lighting\r\n    const pointLight1 = new THREE.PointLight(0xffffff, 1, 1000);\r\n    pointLight1.position.set(0, 500, 0);\r\n    scene.add(pointLight1);\r\n\r\n    const pointLight2 = new THREE.PointLight(0xffffff, 1, 1000);\r\n    pointLight2.position.set(0, -500, 0);\r\n    scene.add(pointLight2);\r\n\r\n    const pointLight3 = new THREE.PointLight(0xffffff, 1, 1000);\r\n    pointLight3.position.set(500, 0, 500);\r\n    scene.add(pointLight3);\r\n\r\n    const pointLight4 = new THREE.PointLight(0xffffff, 1, 1000);\r\n    pointLight4.position.set(-500, 0, -500);\r\n    scene.add(pointLight4);\r\n\r\n    // Create walls and floor with appropriate colors\r\n    const wallMaterial1 = new THREE.MeshBasicMaterial({ color: 0x145da0 });  // Green wall\r\n    const wallMaterial2 = new THREE.MeshBasicMaterial({ color: 0x14A069 });  // Blue wall\r\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: 0xff5757 });  // Red floor\r\n\r\n    const wallGeometry = new THREE.PlaneGeometry(20, 20);\r\n    const floorGeometry = new THREE.PlaneGeometry(20, 20);\r\n\r\n    const floor = new THREE.Mesh(floorGeometry, floorMaterial);\r\n    floor.position.set(0, -10, 0);\r\n    floor.rotation.x = -Math.PI / 2;\r\n\r\n    const rightWall = new THREE.Mesh(wallGeometry, wallMaterial1);\r\n    rightWall.position.set(10, 0, 0);\r\n    rightWall.rotation.y = -Math.PI / 2;\r\n\r\n    const backWall = new THREE.Mesh(wallGeometry, wallMaterial2);\r\n    backWall.position.set(0, 0, -10);\r\n\r\n    scene.add(floor);\r\n    scene.add(rightWall);\r\n    scene.add(backWall);\r\n\r\n    // Add controls to the camera\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n    // Add axis labels\r\n    const loaderFont = new THREE.FontLoader();\r\n    loaderFont.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\r\n      const textMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\r\n\r\n      // X-axis label\r\n      const xTextGeometry = new THREE.TextGeometry('X', {\r\n        font: font,\r\n        size: 1,\r\n        height: 0.1\r\n      });\r\n      const xTextMesh = new THREE.Mesh(xTextGeometry, textMaterial);\r\n      xTextMesh.position.set(11, 0, 0);\r\n      scene.add(xTextMesh);\r\n\r\n      // Y-axis label\r\n      const yTextGeometry = new THREE.TextGeometry('Y', {\r\n        font: font,\r\n        size: 1,\r\n        height: 0.1\r\n      });\r\n      const yTextMesh = new THREE.Mesh(yTextGeometry, textMaterial);\r\n      yTextMesh.position.set(0, 11, 0);\r\n      scene.add(yTextMesh);\r\n\r\n      // Z-axis label\r\n      const zTextGeometry = new THREE.TextGeometry('Z', {\r\n        font: font,\r\n        size: 1,\r\n        height: 0.1\r\n      });\r\n      const zTextMesh = new THREE.Mesh(zTextGeometry, textMaterial);\r\n      zTextMesh.position.set(0, 0, -11);\r\n      scene.add(zTextMesh);\r\n    });\r\n\r\n    controls.minDistance = 10;\r\n    controls.maxDistance = 50;\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = 0.05;\r\n    controls.rotateSpeed = 0.2;\r\n    controls.maxPolarAngle = Math.PI / 3;  // Limit vertical rotation\r\n    controls.minAzimuthAngle = -Math.PI / 5;  // Limit horizontal rotation\r\n    controls.maxAzimuthAngle = Math.PI / 10;  // Limit horizontal rotation\r\n\r\n    // Function to update link rotation and display coordinates\r\n    function updateLinkRotation(linkName, angle) {\r\n      const link = links[linkName];\r\n      if (link && link.parent) {  // We rotate the parent, which is the joint\r\n        const rad = THREE.MathUtils.degToRad(angle);\r\n        switch (linkName) {\r\n          case \"link_0\": break;  // Shoulder joint, rotates around Y\r\n          case \"link_1\": link.parent.rotation.y = rad;  break;\r\n          case \"link_2\": link.parent.rotation.y = rad; break;  // Upper Arm and Elbow, rotate around X\r\n          case \"link_3\": link.parent.rotation.y = rad; break;  // Forearm, rotates around Z\r\n          case \"link_4\": link.parent.rotation.y = rad; break;\r\n          case \"link_5\": link.parent.rotation.y = rad; break;\r\n          case \"link_6\": link.parent.rotation.y = rad; break;\r\n          case \"link_7_basic\": link.parent.rotation.y = rad; break;  // Wrists, rotate around X\r\n          default: console.warn(`Unknown link: ${linkName}`);\r\n        }\r\n      }\r\n      // Update and display coordinates\r\n      const endEffector = links[\"link_7_basic\"];\r\n      if (endEffector) {\r\n        const position = new THREE.Vector3();\r\n        endEffector.getWorldPosition(position);\r\n        document.getElementById(\"position\").innerText = `Position: (X: ${position.x.toFixed(2)}, Y: ${position.y.toFixed(2)}, Z: ${position.z.toFixed(2)})`;\r\n      }\r\n    }\r\n\r\n    // Add event listeners to sliders and text boxes\r\n    const linkNames = [\"link_1\", \"link_2\", \"link_3\", \"link_4\", \"link_5\", \"link_6\", \"link_7_basic\"];\r\n    for (const linkName of linkNames) {\r\n      const slider = document.getElementById(linkName);\r\n      const textBox = document.getElementById(`${linkName}_value`);\r\n\r\n      // Update rotation when slider value changes\r\n      slider.addEventListener('input', function() {\r\n        const value = this.value;\r\n        textBox.value = value;\r\n        updateLinkRotation(linkName, value);\r\n      });\r\n\r\n      // Update rotation when text box value changes\r\n      textBox.addEventListener('input', function() {\r\n        const value = this.value;\r\n        slider.value = value;\r\n        updateLinkRotation(linkName, value);\r\n      });\r\n    }\r\n\r\n    // Render the scene\r\n    function animate() {\r\n      requestAnimationFrame(animate);\r\n      renderer.render(scene, camera);\r\n      controls.update();  // Update the controls for damping effect\r\n    }\r\n\r\n    // Add a listener to the window for resizing\r\n    window.addEventListener(\"resize\", function () {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    });\r\n\r\n    // Start the 3D rendering\r\n    animate();\r\n  </script>\r\n</body>\r\n</html>\r\n\r\n"},"sourceMaps":null,"error":null,"hash":"38d67b5d6ee465f8e57d890e86a4c250","cacheData":{"env":{}}}